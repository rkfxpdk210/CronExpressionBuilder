import java.text.ParseException;
import java.text.SimpleDateFormat;

import org.quartz.CronExpression;

import lombok.Data;

@Data
public class CronExpressionBuilder {
	
	private String second;
	private String minute;
	private String hour;
	private String dayOfMonth;
	private String month;
	
	/**
	 * "Second(*)_Minute(*)_Hour(*)_Date(*)_Month(*)" 형식으로 입력된 포맷을 파싱하여 각각 값을 저장
	 * Date,Month는 "0"일 경우 "*"로 대체된다. 
	 * 값뒤에 "*"이 들어가면 "마다"라는 뜻으로 변환된다. ex) "10*_0*_0*_0_0" ==> 매분 10초마다 작업
	 * DayOfWeek, Year는 고려하지 않는다.
	 * @param exp "Second(*)_Minute(*)_Hour(*)_Date(*)_Month(*)" 형식으로 입력된 포맷
	 */
	public CronExpressionBuilder(String exp) {
		String[] expSplit = exp.split("_");
		for(int i=0; i<expSplit.length; i++) {
			if(expSplit[i].contains("*")) {
				if(expSplit[i].split("\\*")[0].trim().equals("0")) {
					if(i != 0) {
						expSplit[i] = "*";
					}
				}
				else {
					expSplit[i] = "0/" + expSplit[i].split("\\*")[0].trim();
				}
			}
		}
		
		this.second = expSplit[0];
		this.minute = expSplit[1];
		this.hour = expSplit[2];
		this.dayOfMonth = expSplit[3].equals("0") ? "*" : expSplit[3];
		this.month = expSplit[4].equals("0") ? "*" : expSplit[4];
	}
	
	/**
	 * 객체 생성 시 저장된 값을 기반으로 Cron식 생성
	 * @return Cron식
	 */
	public String build() {
		return second + " " + minute + " " + hour + " " + dayOfMonth + " " + month + " ?"; 
	}
	
	/**
	 * 해당 Cron식이 적용된 다음 스케줄 시작 시간 
	 * @param startDate 시작날짜
	 * @param format startDate의 날짜 포맷, default: yyyy-MM-dd HH:mm:ss
	 * @return format에 맞게 변환된 다음 스케줄 시간
	 */
	public String getNextStartTime(String startDate,String format) {
		format = format==null ? "yyyy-MM-dd HH:mm:ss" : format;
		SimpleDateFormat dateFormat = new SimpleDateFormat(format); 
		
		try {
			CronExpression cronExp = new CronExpression(build());
			String nextTime = dateFormat.format(cronExp.getNextValidTimeAfter(dateFormat.parse(startDate)));
			return nextTime;
		} catch (ParseException e) {
			e.printStackTrace();
			return null;
		}
	}
}
